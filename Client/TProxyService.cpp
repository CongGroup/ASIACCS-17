/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TProxyService.h"

namespace proxyserver {


TProxyService_ProxyGet_args::~TProxyService_ProxyGet_args() throw() {
}


uint32_t TProxyService_ProxyGet_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Trapdoor = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->Trapdoor);
          isset_Trapdoor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Trapdoor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TProxyService_ProxyGet_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_ProxyGet_args");

  xfer += oprot->writeFieldBegin("Trapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->Trapdoor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_ProxyGet_pargs::~TProxyService_ProxyGet_pargs() throw() {
}


uint32_t TProxyService_ProxyGet_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_ProxyGet_pargs");

  xfer += oprot->writeFieldBegin("Trapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary((*(this->Trapdoor)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_ProxyGet_result::~TProxyService_ProxyGet_result() throw() {
}


uint32_t TProxyService_ProxyGet_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TProxyService_ProxyGet_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TProxyService_ProxyGet_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeBinary(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TProxyService_ProxyGet_presult::~TProxyService_ProxyGet_presult() throw() {
}


uint32_t TProxyService_ProxyGet_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


TProxyService_ProxyPut_args::~TProxyService_ProxyPut_args() throw() {
}


uint32_t TProxyService_ProxyPut_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Trapdoor = false;
  bool isset_Val = false;
  bool isset_IndexTrapdoor = false;
  bool isset_IndexVal = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->Trapdoor);
          isset_Trapdoor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->Val);
          isset_Val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexTrapdoor);
          isset_IndexTrapdoor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexVal);
          isset_IndexVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Trapdoor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Val)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_IndexTrapdoor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_IndexVal)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TProxyService_ProxyPut_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_ProxyPut_args");

  xfer += oprot->writeFieldBegin("Trapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->Trapdoor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Val", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->Val);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->IndexTrapdoor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexVal", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->IndexVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_ProxyPut_pargs::~TProxyService_ProxyPut_pargs() throw() {
}


uint32_t TProxyService_ProxyPut_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_ProxyPut_pargs");

  xfer += oprot->writeFieldBegin("Trapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary((*(this->Trapdoor)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Val", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary((*(this->Val)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary((*(this->IndexTrapdoor)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexVal", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary((*(this->IndexVal)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_ProxyPut_result::~TProxyService_ProxyPut_result() throw() {
}


uint32_t TProxyService_ProxyPut_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TProxyService_ProxyPut_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TProxyService_ProxyPut_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TProxyService_ProxyPut_presult::~TProxyService_ProxyPut_presult() throw() {
}


uint32_t TProxyService_ProxyPut_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


TProxyService_ProxyGetColumn_args::~TProxyService_ProxyGetColumn_args() throw() {
}


uint32_t TProxyService_ProxyGetColumn_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_IndexTrapdoor = false;
  bool isset_IndexMask = false;
  bool isset_GetNum = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexTrapdoor);
          isset_IndexTrapdoor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexMask);
          isset_IndexMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->GetNum);
          isset_GetNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_IndexTrapdoor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_IndexMask)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_GetNum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TProxyService_ProxyGetColumn_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_ProxyGetColumn_args");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->IndexTrapdoor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexMask", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->IndexMask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("GetNum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->GetNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_ProxyGetColumn_pargs::~TProxyService_ProxyGetColumn_pargs() throw() {
}


uint32_t TProxyService_ProxyGetColumn_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_ProxyGetColumn_pargs");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary((*(this->IndexTrapdoor)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexMask", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary((*(this->IndexMask)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("GetNum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->GetNum)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_ProxyGetColumn_result::~TProxyService_ProxyGetColumn_result() throw() {
}


uint32_t TProxyService_ProxyGetColumn_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->success.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readBinary(this->success[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TProxyService_ProxyGetColumn_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TProxyService_ProxyGetColumn_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
      std::vector<std::string> ::const_iterator _iter5;
      for (_iter5 = this->success.begin(); _iter5 != this->success.end(); ++_iter5)
      {
        xfer += oprot->writeBinary((*_iter5));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TProxyService_ProxyGetColumn_presult::~TProxyService_ProxyGetColumn_presult() throw() {
}


uint32_t TProxyService_ProxyGetColumn_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            (*(this->success)).resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readBinary((*(this->success))[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


TProxyService_EqualSearch1_args::~TProxyService_EqualSearch1_args() throw() {
}


uint32_t TProxyService_EqualSearch1_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_IndexTrapdoor = false;
  bool isset_IndexMask = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexTrapdoor);
          isset_IndexTrapdoor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexMask);
          isset_IndexMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_IndexTrapdoor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_IndexMask)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TProxyService_EqualSearch1_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_EqualSearch1_args");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->IndexTrapdoor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexMask", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->IndexMask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_EqualSearch1_pargs::~TProxyService_EqualSearch1_pargs() throw() {
}


uint32_t TProxyService_EqualSearch1_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_EqualSearch1_pargs");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary((*(this->IndexTrapdoor)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexMask", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary((*(this->IndexMask)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_EqualSearch1_result::~TProxyService_EqualSearch1_result() throw() {
}


uint32_t TProxyService_EqualSearch1_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->success.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += iprot->readBinary(this->success[_i15]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TProxyService_EqualSearch1_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TProxyService_EqualSearch1_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
      std::vector<std::string> ::const_iterator _iter16;
      for (_iter16 = this->success.begin(); _iter16 != this->success.end(); ++_iter16)
      {
        xfer += oprot->writeBinary((*_iter16));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TProxyService_EqualSearch1_presult::~TProxyService_EqualSearch1_presult() throw() {
}


uint32_t TProxyService_EqualSearch1_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            (*(this->success)).resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += iprot->readBinary((*(this->success))[_i21]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


TProxyService_EqualSearch2_args::~TProxyService_EqualSearch2_args() throw() {
}


uint32_t TProxyService_EqualSearch2_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_IndexTrapdoor = false;
  bool isset_IndexMask = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexTrapdoor);
          isset_IndexTrapdoor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexMask);
          isset_IndexMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_IndexTrapdoor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_IndexMask)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TProxyService_EqualSearch2_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_EqualSearch2_args");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->IndexTrapdoor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexMask", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->IndexMask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_EqualSearch2_pargs::~TProxyService_EqualSearch2_pargs() throw() {
}


uint32_t TProxyService_EqualSearch2_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_EqualSearch2_pargs");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary((*(this->IndexTrapdoor)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexMask", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary((*(this->IndexMask)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_EqualSearch2_result::~TProxyService_EqualSearch2_result() throw() {
}


uint32_t TProxyService_EqualSearch2_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->success.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += iprot->readBinary(this->success[_i26]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TProxyService_EqualSearch2_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TProxyService_EqualSearch2_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
      std::vector<std::string> ::const_iterator _iter27;
      for (_iter27 = this->success.begin(); _iter27 != this->success.end(); ++_iter27)
      {
        xfer += oprot->writeBinary((*_iter27));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TProxyService_EqualSearch2_presult::~TProxyService_EqualSearch2_presult() throw() {
}


uint32_t TProxyService_EqualSearch2_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            (*(this->success)).resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += iprot->readBinary((*(this->success))[_i32]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


TProxyService_OrderSearch_args::~TProxyService_OrderSearch_args() throw() {
}


uint32_t TProxyService_OrderSearch_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_IndexTrapdoor = false;
  bool isset_OrderLeft = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexTrapdoor);
          isset_IndexTrapdoor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->OrderLeft);
          isset_OrderLeft = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_IndexTrapdoor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_OrderLeft)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TProxyService_OrderSearch_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_OrderSearch_args");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->IndexTrapdoor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OrderLeft", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->OrderLeft);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_OrderSearch_pargs::~TProxyService_OrderSearch_pargs() throw() {
}


uint32_t TProxyService_OrderSearch_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_OrderSearch_pargs");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary((*(this->IndexTrapdoor)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OrderLeft", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary((*(this->OrderLeft)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_OrderSearch_result::~TProxyService_OrderSearch_result() throw() {
}


uint32_t TProxyService_OrderSearch_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _etype36;
            xfer += iprot->readListBegin(_etype36, _size33);
            this->success.resize(_size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              xfer += iprot->readBinary(this->success[_i37]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TProxyService_OrderSearch_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TProxyService_OrderSearch_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
      std::vector<std::string> ::const_iterator _iter38;
      for (_iter38 = this->success.begin(); _iter38 != this->success.end(); ++_iter38)
      {
        xfer += oprot->writeBinary((*_iter38));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TProxyService_OrderSearch_presult::~TProxyService_OrderSearch_presult() throw() {
}


uint32_t TProxyService_OrderSearch_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            (*(this->success)).resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += iprot->readBinary((*(this->success))[_i43]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


TProxyService_RunCommand_args::~TProxyService_RunCommand_args() throw() {
}


uint32_t TProxyService_RunCommand_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_command = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->command.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _etype47;
            xfer += iprot->readListBegin(_etype47, _size44);
            this->command.resize(_size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              xfer += iprot->readBinary(this->command[_i48]);
            }
            xfer += iprot->readListEnd();
          }
          isset_command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_command)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TProxyService_RunCommand_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_RunCommand_args");

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->command.size()));
    std::vector<std::string> ::const_iterator _iter49;
    for (_iter49 = this->command.begin(); _iter49 != this->command.end(); ++_iter49)
    {
      xfer += oprot->writeBinary((*_iter49));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_RunCommand_pargs::~TProxyService_RunCommand_pargs() throw() {
}


uint32_t TProxyService_RunCommand_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_RunCommand_pargs");

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->command)).size()));
    std::vector<std::string> ::const_iterator _iter50;
    for (_iter50 = (*(this->command)).begin(); _iter50 != (*(this->command)).end(); ++_iter50)
    {
      xfer += oprot->writeBinary((*_iter50));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_RunCommand_result::~TProxyService_RunCommand_result() throw() {
}


uint32_t TProxyService_RunCommand_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size51;
            ::apache::thrift::protocol::TType _etype54;
            xfer += iprot->readListBegin(_etype54, _size51);
            this->success.resize(_size51);
            uint32_t _i55;
            for (_i55 = 0; _i55 < _size51; ++_i55)
            {
              xfer += iprot->readBinary(this->success[_i55]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TProxyService_RunCommand_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TProxyService_RunCommand_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
      std::vector<std::string> ::const_iterator _iter56;
      for (_iter56 = this->success.begin(); _iter56 != this->success.end(); ++_iter56)
      {
        xfer += oprot->writeBinary((*_iter56));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TProxyService_RunCommand_presult::~TProxyService_RunCommand_presult() throw() {
}


uint32_t TProxyService_RunCommand_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size57;
            ::apache::thrift::protocol::TType _etype60;
            xfer += iprot->readListBegin(_etype60, _size57);
            (*(this->success)).resize(_size57);
            uint32_t _i61;
            for (_i61 = 0; _i61 < _size57; ++_i61)
            {
              xfer += iprot->readBinary((*(this->success))[_i61]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


TProxyService_EqualSearch1PlainText_args::~TProxyService_EqualSearch1PlainText_args() throw() {
}


uint32_t TProxyService_EqualSearch1PlainText_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_IndexTrapdoor = false;
  bool isset_IndexMask = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexTrapdoor);
          isset_IndexTrapdoor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexMask);
          isset_IndexMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_IndexTrapdoor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_IndexMask)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TProxyService_EqualSearch1PlainText_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_EqualSearch1PlainText_args");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->IndexTrapdoor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexMask", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->IndexMask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_EqualSearch1PlainText_pargs::~TProxyService_EqualSearch1PlainText_pargs() throw() {
}


uint32_t TProxyService_EqualSearch1PlainText_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_EqualSearch1PlainText_pargs");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary((*(this->IndexTrapdoor)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexMask", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary((*(this->IndexMask)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_EqualSearch1PlainText_result::~TProxyService_EqualSearch1PlainText_result() throw() {
}


uint32_t TProxyService_EqualSearch1PlainText_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size62;
            ::apache::thrift::protocol::TType _etype65;
            xfer += iprot->readListBegin(_etype65, _size62);
            this->success.resize(_size62);
            uint32_t _i66;
            for (_i66 = 0; _i66 < _size62; ++_i66)
            {
              xfer += iprot->readBinary(this->success[_i66]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TProxyService_EqualSearch1PlainText_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TProxyService_EqualSearch1PlainText_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
      std::vector<std::string> ::const_iterator _iter67;
      for (_iter67 = this->success.begin(); _iter67 != this->success.end(); ++_iter67)
      {
        xfer += oprot->writeBinary((*_iter67));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TProxyService_EqualSearch1PlainText_presult::~TProxyService_EqualSearch1PlainText_presult() throw() {
}


uint32_t TProxyService_EqualSearch1PlainText_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size68;
            ::apache::thrift::protocol::TType _etype71;
            xfer += iprot->readListBegin(_etype71, _size68);
            (*(this->success)).resize(_size68);
            uint32_t _i72;
            for (_i72 = 0; _i72 < _size68; ++_i72)
            {
              xfer += iprot->readBinary((*(this->success))[_i72]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


TProxyService_EqualSearch2PlainText_args::~TProxyService_EqualSearch2PlainText_args() throw() {
}


uint32_t TProxyService_EqualSearch2PlainText_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_IndexTrapdoor = false;
  bool isset_IndexMask = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexTrapdoor);
          isset_IndexTrapdoor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexMask);
          isset_IndexMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_IndexTrapdoor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_IndexMask)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TProxyService_EqualSearch2PlainText_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_EqualSearch2PlainText_args");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->IndexTrapdoor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexMask", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->IndexMask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_EqualSearch2PlainText_pargs::~TProxyService_EqualSearch2PlainText_pargs() throw() {
}


uint32_t TProxyService_EqualSearch2PlainText_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_EqualSearch2PlainText_pargs");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary((*(this->IndexTrapdoor)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IndexMask", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary((*(this->IndexMask)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_EqualSearch2PlainText_result::~TProxyService_EqualSearch2PlainText_result() throw() {
}


uint32_t TProxyService_EqualSearch2PlainText_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _etype76;
            xfer += iprot->readListBegin(_etype76, _size73);
            this->success.resize(_size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              xfer += iprot->readBinary(this->success[_i77]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TProxyService_EqualSearch2PlainText_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TProxyService_EqualSearch2PlainText_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
      std::vector<std::string> ::const_iterator _iter78;
      for (_iter78 = this->success.begin(); _iter78 != this->success.end(); ++_iter78)
      {
        xfer += oprot->writeBinary((*_iter78));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TProxyService_EqualSearch2PlainText_presult::~TProxyService_EqualSearch2PlainText_presult() throw() {
}


uint32_t TProxyService_EqualSearch2PlainText_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size79;
            ::apache::thrift::protocol::TType _etype82;
            xfer += iprot->readListBegin(_etype82, _size79);
            (*(this->success)).resize(_size79);
            uint32_t _i83;
            for (_i83 = 0; _i83 < _size79; ++_i83)
            {
              xfer += iprot->readBinary((*(this->success))[_i83]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


TProxyService_OrderSearchPlainText_args::~TProxyService_OrderSearchPlainText_args() throw() {
}


uint32_t TProxyService_OrderSearchPlainText_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_IndexTrapdoor = false;
  bool isset_OrderLeft = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->IndexTrapdoor);
          isset_IndexTrapdoor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->OrderLeft);
          isset_OrderLeft = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_IndexTrapdoor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_OrderLeft)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TProxyService_OrderSearchPlainText_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_OrderSearchPlainText_args");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->IndexTrapdoor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OrderLeft", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->OrderLeft);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_OrderSearchPlainText_pargs::~TProxyService_OrderSearchPlainText_pargs() throw() {
}


uint32_t TProxyService_OrderSearchPlainText_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TProxyService_OrderSearchPlainText_pargs");

  xfer += oprot->writeFieldBegin("IndexTrapdoor", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary((*(this->IndexTrapdoor)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OrderLeft", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary((*(this->OrderLeft)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TProxyService_OrderSearchPlainText_result::~TProxyService_OrderSearchPlainText_result() throw() {
}


uint32_t TProxyService_OrderSearchPlainText_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size84;
            ::apache::thrift::protocol::TType _etype87;
            xfer += iprot->readListBegin(_etype87, _size84);
            this->success.resize(_size84);
            uint32_t _i88;
            for (_i88 = 0; _i88 < _size84; ++_i88)
            {
              xfer += iprot->readBinary(this->success[_i88]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TProxyService_OrderSearchPlainText_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TProxyService_OrderSearchPlainText_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
      std::vector<std::string> ::const_iterator _iter89;
      for (_iter89 = this->success.begin(); _iter89 != this->success.end(); ++_iter89)
      {
        xfer += oprot->writeBinary((*_iter89));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TProxyService_OrderSearchPlainText_presult::~TProxyService_OrderSearchPlainText_presult() throw() {
}


uint32_t TProxyService_OrderSearchPlainText_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size90;
            ::apache::thrift::protocol::TType _etype93;
            xfer += iprot->readListBegin(_etype93, _size90);
            (*(this->success)).resize(_size90);
            uint32_t _i94;
            for (_i94 = 0; _i94 < _size90; ++_i94)
            {
              xfer += iprot->readBinary((*(this->success))[_i94]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void TProxyServiceClient::ProxyGet(std::string& _return, const std::string& Trapdoor)
{
  send_ProxyGet(Trapdoor);
  recv_ProxyGet(_return);
}

void TProxyServiceClient::send_ProxyGet(const std::string& Trapdoor)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ProxyGet", ::apache::thrift::protocol::T_CALL, cseqid);

  TProxyService_ProxyGet_pargs args;
  args.Trapdoor = &Trapdoor;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void TProxyServiceClient::recv_ProxyGet(std::string& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ProxyGet") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  TProxyService_ProxyGet_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ProxyGet failed: unknown result");
}

void TProxyServiceClient::ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal)
{
  send_ProxyPut(Trapdoor, Val, IndexTrapdoor, IndexVal);
  recv_ProxyPut();
}

void TProxyServiceClient::send_ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ProxyPut", ::apache::thrift::protocol::T_CALL, cseqid);

  TProxyService_ProxyPut_pargs args;
  args.Trapdoor = &Trapdoor;
  args.Val = &Val;
  args.IndexTrapdoor = &IndexTrapdoor;
  args.IndexVal = &IndexVal;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void TProxyServiceClient::recv_ProxyPut()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ProxyPut") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  TProxyService_ProxyPut_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

void TProxyServiceClient::ProxyGetColumn(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask, const int32_t GetNum)
{
  send_ProxyGetColumn(IndexTrapdoor, IndexMask, GetNum);
  recv_ProxyGetColumn(_return);
}

void TProxyServiceClient::send_ProxyGetColumn(const std::string& IndexTrapdoor, const std::string& IndexMask, const int32_t GetNum)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ProxyGetColumn", ::apache::thrift::protocol::T_CALL, cseqid);

  TProxyService_ProxyGetColumn_pargs args;
  args.IndexTrapdoor = &IndexTrapdoor;
  args.IndexMask = &IndexMask;
  args.GetNum = &GetNum;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void TProxyServiceClient::recv_ProxyGetColumn(std::vector<std::string> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ProxyGetColumn") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  TProxyService_ProxyGetColumn_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ProxyGetColumn failed: unknown result");
}

void TProxyServiceClient::EqualSearch1(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask)
{
  send_EqualSearch1(IndexTrapdoor, IndexMask);
  recv_EqualSearch1(_return);
}

void TProxyServiceClient::send_EqualSearch1(const std::string& IndexTrapdoor, const std::string& IndexMask)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("EqualSearch1", ::apache::thrift::protocol::T_CALL, cseqid);

  TProxyService_EqualSearch1_pargs args;
  args.IndexTrapdoor = &IndexTrapdoor;
  args.IndexMask = &IndexMask;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void TProxyServiceClient::recv_EqualSearch1(std::vector<std::string> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("EqualSearch1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  TProxyService_EqualSearch1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "EqualSearch1 failed: unknown result");
}

void TProxyServiceClient::EqualSearch2(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask)
{
  send_EqualSearch2(IndexTrapdoor, IndexMask);
  recv_EqualSearch2(_return);
}

void TProxyServiceClient::send_EqualSearch2(const std::string& IndexTrapdoor, const std::string& IndexMask)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("EqualSearch2", ::apache::thrift::protocol::T_CALL, cseqid);

  TProxyService_EqualSearch2_pargs args;
  args.IndexTrapdoor = &IndexTrapdoor;
  args.IndexMask = &IndexMask;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void TProxyServiceClient::recv_EqualSearch2(std::vector<std::string> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("EqualSearch2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  TProxyService_EqualSearch2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "EqualSearch2 failed: unknown result");
}

void TProxyServiceClient::OrderSearch(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& OrderLeft)
{
  send_OrderSearch(IndexTrapdoor, OrderLeft);
  recv_OrderSearch(_return);
}

void TProxyServiceClient::send_OrderSearch(const std::string& IndexTrapdoor, const std::string& OrderLeft)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("OrderSearch", ::apache::thrift::protocol::T_CALL, cseqid);

  TProxyService_OrderSearch_pargs args;
  args.IndexTrapdoor = &IndexTrapdoor;
  args.OrderLeft = &OrderLeft;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void TProxyServiceClient::recv_OrderSearch(std::vector<std::string> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("OrderSearch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  TProxyService_OrderSearch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "OrderSearch failed: unknown result");
}

void TProxyServiceClient::RunCommand(std::vector<std::string> & _return, const std::vector<std::string> & command)
{
  send_RunCommand(command);
  recv_RunCommand(_return);
}

void TProxyServiceClient::send_RunCommand(const std::vector<std::string> & command)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("RunCommand", ::apache::thrift::protocol::T_CALL, cseqid);

  TProxyService_RunCommand_pargs args;
  args.command = &command;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void TProxyServiceClient::recv_RunCommand(std::vector<std::string> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("RunCommand") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  TProxyService_RunCommand_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "RunCommand failed: unknown result");
}

void TProxyServiceClient::EqualSearch1PlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask)
{
  send_EqualSearch1PlainText(IndexTrapdoor, IndexMask);
  recv_EqualSearch1PlainText(_return);
}

void TProxyServiceClient::send_EqualSearch1PlainText(const std::string& IndexTrapdoor, const std::string& IndexMask)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("EqualSearch1PlainText", ::apache::thrift::protocol::T_CALL, cseqid);

  TProxyService_EqualSearch1PlainText_pargs args;
  args.IndexTrapdoor = &IndexTrapdoor;
  args.IndexMask = &IndexMask;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void TProxyServiceClient::recv_EqualSearch1PlainText(std::vector<std::string> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("EqualSearch1PlainText") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  TProxyService_EqualSearch1PlainText_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "EqualSearch1PlainText failed: unknown result");
}

void TProxyServiceClient::EqualSearch2PlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask)
{
  send_EqualSearch2PlainText(IndexTrapdoor, IndexMask);
  recv_EqualSearch2PlainText(_return);
}

void TProxyServiceClient::send_EqualSearch2PlainText(const std::string& IndexTrapdoor, const std::string& IndexMask)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("EqualSearch2PlainText", ::apache::thrift::protocol::T_CALL, cseqid);

  TProxyService_EqualSearch2PlainText_pargs args;
  args.IndexTrapdoor = &IndexTrapdoor;
  args.IndexMask = &IndexMask;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void TProxyServiceClient::recv_EqualSearch2PlainText(std::vector<std::string> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("EqualSearch2PlainText") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  TProxyService_EqualSearch2PlainText_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "EqualSearch2PlainText failed: unknown result");
}

void TProxyServiceClient::OrderSearchPlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& OrderLeft)
{
  send_OrderSearchPlainText(IndexTrapdoor, OrderLeft);
  recv_OrderSearchPlainText(_return);
}

void TProxyServiceClient::send_OrderSearchPlainText(const std::string& IndexTrapdoor, const std::string& OrderLeft)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("OrderSearchPlainText", ::apache::thrift::protocol::T_CALL, cseqid);

  TProxyService_OrderSearchPlainText_pargs args;
  args.IndexTrapdoor = &IndexTrapdoor;
  args.OrderLeft = &OrderLeft;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void TProxyServiceClient::recv_OrderSearchPlainText(std::vector<std::string> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("OrderSearchPlainText") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  TProxyService_OrderSearchPlainText_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "OrderSearchPlainText failed: unknown result");
}

bool TProxyServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void TProxyServiceProcessor::process_ProxyGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TProxyService.ProxyGet", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TProxyService.ProxyGet");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TProxyService.ProxyGet");
  }

  TProxyService_ProxyGet_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TProxyService.ProxyGet", bytes);
  }

  TProxyService_ProxyGet_result result;
  try {
    iface_->ProxyGet(result.success, args.Trapdoor);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TProxyService.ProxyGet");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ProxyGet", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TProxyService.ProxyGet");
  }

  oprot->writeMessageBegin("ProxyGet", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TProxyService.ProxyGet", bytes);
  }
}

void TProxyServiceProcessor::process_ProxyPut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TProxyService.ProxyPut", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TProxyService.ProxyPut");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TProxyService.ProxyPut");
  }

  TProxyService_ProxyPut_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TProxyService.ProxyPut", bytes);
  }

  TProxyService_ProxyPut_result result;
  try {
    iface_->ProxyPut(args.Trapdoor, args.Val, args.IndexTrapdoor, args.IndexVal);
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TProxyService.ProxyPut");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ProxyPut", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TProxyService.ProxyPut");
  }

  oprot->writeMessageBegin("ProxyPut", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TProxyService.ProxyPut", bytes);
  }
}

void TProxyServiceProcessor::process_ProxyGetColumn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TProxyService.ProxyGetColumn", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TProxyService.ProxyGetColumn");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TProxyService.ProxyGetColumn");
  }

  TProxyService_ProxyGetColumn_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TProxyService.ProxyGetColumn", bytes);
  }

  TProxyService_ProxyGetColumn_result result;
  try {
    iface_->ProxyGetColumn(result.success, args.IndexTrapdoor, args.IndexMask, args.GetNum);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TProxyService.ProxyGetColumn");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ProxyGetColumn", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TProxyService.ProxyGetColumn");
  }

  oprot->writeMessageBegin("ProxyGetColumn", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TProxyService.ProxyGetColumn", bytes);
  }
}

void TProxyServiceProcessor::process_EqualSearch1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TProxyService.EqualSearch1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TProxyService.EqualSearch1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TProxyService.EqualSearch1");
  }

  TProxyService_EqualSearch1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TProxyService.EqualSearch1", bytes);
  }

  TProxyService_EqualSearch1_result result;
  try {
    iface_->EqualSearch1(result.success, args.IndexTrapdoor, args.IndexMask);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TProxyService.EqualSearch1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("EqualSearch1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TProxyService.EqualSearch1");
  }

  oprot->writeMessageBegin("EqualSearch1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TProxyService.EqualSearch1", bytes);
  }
}

void TProxyServiceProcessor::process_EqualSearch2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TProxyService.EqualSearch2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TProxyService.EqualSearch2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TProxyService.EqualSearch2");
  }

  TProxyService_EqualSearch2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TProxyService.EqualSearch2", bytes);
  }

  TProxyService_EqualSearch2_result result;
  try {
    iface_->EqualSearch2(result.success, args.IndexTrapdoor, args.IndexMask);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TProxyService.EqualSearch2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("EqualSearch2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TProxyService.EqualSearch2");
  }

  oprot->writeMessageBegin("EqualSearch2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TProxyService.EqualSearch2", bytes);
  }
}

void TProxyServiceProcessor::process_OrderSearch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TProxyService.OrderSearch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TProxyService.OrderSearch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TProxyService.OrderSearch");
  }

  TProxyService_OrderSearch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TProxyService.OrderSearch", bytes);
  }

  TProxyService_OrderSearch_result result;
  try {
    iface_->OrderSearch(result.success, args.IndexTrapdoor, args.OrderLeft);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TProxyService.OrderSearch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("OrderSearch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TProxyService.OrderSearch");
  }

  oprot->writeMessageBegin("OrderSearch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TProxyService.OrderSearch", bytes);
  }
}

void TProxyServiceProcessor::process_RunCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TProxyService.RunCommand", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TProxyService.RunCommand");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TProxyService.RunCommand");
  }

  TProxyService_RunCommand_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TProxyService.RunCommand", bytes);
  }

  TProxyService_RunCommand_result result;
  try {
    iface_->RunCommand(result.success, args.command);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TProxyService.RunCommand");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("RunCommand", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TProxyService.RunCommand");
  }

  oprot->writeMessageBegin("RunCommand", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TProxyService.RunCommand", bytes);
  }
}

void TProxyServiceProcessor::process_EqualSearch1PlainText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TProxyService.EqualSearch1PlainText", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TProxyService.EqualSearch1PlainText");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TProxyService.EqualSearch1PlainText");
  }

  TProxyService_EqualSearch1PlainText_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TProxyService.EqualSearch1PlainText", bytes);
  }

  TProxyService_EqualSearch1PlainText_result result;
  try {
    iface_->EqualSearch1PlainText(result.success, args.IndexTrapdoor, args.IndexMask);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TProxyService.EqualSearch1PlainText");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("EqualSearch1PlainText", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TProxyService.EqualSearch1PlainText");
  }

  oprot->writeMessageBegin("EqualSearch1PlainText", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TProxyService.EqualSearch1PlainText", bytes);
  }
}

void TProxyServiceProcessor::process_EqualSearch2PlainText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TProxyService.EqualSearch2PlainText", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TProxyService.EqualSearch2PlainText");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TProxyService.EqualSearch2PlainText");
  }

  TProxyService_EqualSearch2PlainText_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TProxyService.EqualSearch2PlainText", bytes);
  }

  TProxyService_EqualSearch2PlainText_result result;
  try {
    iface_->EqualSearch2PlainText(result.success, args.IndexTrapdoor, args.IndexMask);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TProxyService.EqualSearch2PlainText");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("EqualSearch2PlainText", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TProxyService.EqualSearch2PlainText");
  }

  oprot->writeMessageBegin("EqualSearch2PlainText", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TProxyService.EqualSearch2PlainText", bytes);
  }
}

void TProxyServiceProcessor::process_OrderSearchPlainText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TProxyService.OrderSearchPlainText", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TProxyService.OrderSearchPlainText");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TProxyService.OrderSearchPlainText");
  }

  TProxyService_OrderSearchPlainText_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TProxyService.OrderSearchPlainText", bytes);
  }

  TProxyService_OrderSearchPlainText_result result;
  try {
    iface_->OrderSearchPlainText(result.success, args.IndexTrapdoor, args.OrderLeft);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TProxyService.OrderSearchPlainText");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("OrderSearchPlainText", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TProxyService.OrderSearchPlainText");
  }

  oprot->writeMessageBegin("OrderSearchPlainText", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TProxyService.OrderSearchPlainText", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > TProxyServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< TProxyServiceIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< TProxyServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new TProxyServiceProcessor(handler));
  return processor;
}
} // namespace

