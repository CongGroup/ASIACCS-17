/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TProxyService_H
#define TProxyService_H

#include <thrift/TDispatchProcessor.h>
#include "ProxyServer_types.h"

namespace proxyserver {

class TProxyServiceIf {
 public:
  virtual ~TProxyServiceIf() {}

  /**
   * ProxyGet API
   * @return Value as Binary
   * 
   * @param Trapdoor
   */
  virtual void ProxyGet(std::string& _return, const std::string& Trapdoor) = 0;

  /**
   * ProxyPut API
   * 
   * @param Trapdoor
   * @param Val
   * @param IndexTrapdoor
   * @param IndexVal
   */
  virtual void ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal) = 0;

  /**
   * ProxyGetColumn
   * @return a binary list of Column value
   * 
   * @param IndexTrapdoor
   * @param IndexMask
   * @param GetNum
   */
  virtual void ProxyGetColumn(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask, const int32_t GetNum) = 0;

  /**
   * EqualSearch1
   * @return a binary list of Key, with linear comparation
   * 
   * @param IndexTrapdoor
   * @param IndexMask
   */
  virtual void EqualSearch1(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask) = 0;

  /**
   * EqualSearch2
   * @return a binary list of Key, with fast index
   * 
   * @param IndexTrapdoor
   * @param IndexMask
   */
  virtual void EqualSearch2(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask) = 0;

  /**
   * OrderSearch
   * @return a binary list of Key which meet the requirement of order
   * 
   * @param IndexTrapdoor
   * @param OrderLeft
   */
  virtual void OrderSearch(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& OrderLeft) = 0;

  /**
   * Proxy RunRedis command
   * @return a binary list of the result
   * 
   * @param command
   */
  virtual void RunCommand(std::vector<std::string> & _return, const std::vector<std::string> & command) = 0;

  /**
   * EqualSearch1 PlainText
   * @return a binary list of Key, with linear comparation
   * 
   * @param IndexTrapdoor
   * @param IndexMask
   */
  virtual void EqualSearch1PlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask) = 0;

  /**
   * EqualSearch2 PlainText
   * @return a binary list of Key, with fast index
   * 
   * @param IndexTrapdoor
   * @param IndexMask
   */
  virtual void EqualSearch2PlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask) = 0;

  /**
   * OrderSearch PlainText
   * @return a binary list of Key which meet the requirement of order
   * 
   * @param IndexTrapdoor
   * @param OrderLeft
   */
  virtual void OrderSearchPlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& OrderLeft) = 0;
};

class TProxyServiceIfFactory {
 public:
  typedef TProxyServiceIf Handler;

  virtual ~TProxyServiceIfFactory() {}

  virtual TProxyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TProxyServiceIf* /* handler */) = 0;
};

class TProxyServiceIfSingletonFactory : virtual public TProxyServiceIfFactory {
 public:
  TProxyServiceIfSingletonFactory(const boost::shared_ptr<TProxyServiceIf>& iface) : iface_(iface) {}
  virtual ~TProxyServiceIfSingletonFactory() {}

  virtual TProxyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TProxyServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TProxyServiceIf> iface_;
};

class TProxyServiceNull : virtual public TProxyServiceIf {
 public:
  virtual ~TProxyServiceNull() {}
  void ProxyGet(std::string& /* _return */, const std::string& /* Trapdoor */) {
    return;
  }
  void ProxyPut(const std::string& /* Trapdoor */, const std::string& /* Val */, const std::string& /* IndexTrapdoor */, const std::string& /* IndexVal */) {
    return;
  }
  void ProxyGetColumn(std::vector<std::string> & /* _return */, const std::string& /* IndexTrapdoor */, const std::string& /* IndexMask */, const int32_t /* GetNum */) {
    return;
  }
  void EqualSearch1(std::vector<std::string> & /* _return */, const std::string& /* IndexTrapdoor */, const std::string& /* IndexMask */) {
    return;
  }
  void EqualSearch2(std::vector<std::string> & /* _return */, const std::string& /* IndexTrapdoor */, const std::string& /* IndexMask */) {
    return;
  }
  void OrderSearch(std::vector<std::string> & /* _return */, const std::string& /* IndexTrapdoor */, const std::string& /* OrderLeft */) {
    return;
  }
  void RunCommand(std::vector<std::string> & /* _return */, const std::vector<std::string> & /* command */) {
    return;
  }
  void EqualSearch1PlainText(std::vector<std::string> & /* _return */, const std::string& /* IndexTrapdoor */, const std::string& /* IndexMask */) {
    return;
  }
  void EqualSearch2PlainText(std::vector<std::string> & /* _return */, const std::string& /* IndexTrapdoor */, const std::string& /* IndexMask */) {
    return;
  }
  void OrderSearchPlainText(std::vector<std::string> & /* _return */, const std::string& /* IndexTrapdoor */, const std::string& /* OrderLeft */) {
    return;
  }
};


class TProxyService_ProxyGet_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TProxyService_ProxyGet_args(const TProxyService_ProxyGet_args&);
  TProxyService_ProxyGet_args& operator=(const TProxyService_ProxyGet_args&);
  TProxyService_ProxyGet_args() : Trapdoor() {
  }

  virtual ~TProxyService_ProxyGet_args() throw();
  std::string Trapdoor;

  void __set_Trapdoor(const std::string& val);

  bool operator == (const TProxyService_ProxyGet_args & rhs) const
  {
    if (!(Trapdoor == rhs.Trapdoor))
      return false;
    return true;
  }
  bool operator != (const TProxyService_ProxyGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyGet_args& obj);
};


class TProxyService_ProxyGet_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~TProxyService_ProxyGet_pargs() throw();
  const std::string* Trapdoor;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyGet_pargs& obj);
};

typedef struct _TProxyService_ProxyGet_result__isset {
  _TProxyService_ProxyGet_result__isset() : success(false) {}
  bool success :1;
} _TProxyService_ProxyGet_result__isset;

class TProxyService_ProxyGet_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  TProxyService_ProxyGet_result(const TProxyService_ProxyGet_result&);
  TProxyService_ProxyGet_result& operator=(const TProxyService_ProxyGet_result&);
  TProxyService_ProxyGet_result() : success() {
  }

  virtual ~TProxyService_ProxyGet_result() throw();
  std::string success;

  _TProxyService_ProxyGet_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TProxyService_ProxyGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TProxyService_ProxyGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyGet_result& obj);
};

typedef struct _TProxyService_ProxyGet_presult__isset {
  _TProxyService_ProxyGet_presult__isset() : success(false) {}
  bool success :1;
} _TProxyService_ProxyGet_presult__isset;

class TProxyService_ProxyGet_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~TProxyService_ProxyGet_presult() throw();
  std::string* success;

  _TProxyService_ProxyGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyGet_presult& obj);
};


class TProxyService_ProxyPut_args {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  TProxyService_ProxyPut_args(const TProxyService_ProxyPut_args&);
  TProxyService_ProxyPut_args& operator=(const TProxyService_ProxyPut_args&);
  TProxyService_ProxyPut_args() : Trapdoor(), Val(), IndexTrapdoor(), IndexVal() {
  }

  virtual ~TProxyService_ProxyPut_args() throw();
  std::string Trapdoor;
  std::string Val;
  std::string IndexTrapdoor;
  std::string IndexVal;

  void __set_Trapdoor(const std::string& val);

  void __set_Val(const std::string& val);

  void __set_IndexTrapdoor(const std::string& val);

  void __set_IndexVal(const std::string& val);

  bool operator == (const TProxyService_ProxyPut_args & rhs) const
  {
    if (!(Trapdoor == rhs.Trapdoor))
      return false;
    if (!(Val == rhs.Val))
      return false;
    if (!(IndexTrapdoor == rhs.IndexTrapdoor))
      return false;
    if (!(IndexVal == rhs.IndexVal))
      return false;
    return true;
  }
  bool operator != (const TProxyService_ProxyPut_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyPut_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyPut_args& obj);
};


class TProxyService_ProxyPut_pargs {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};


  virtual ~TProxyService_ProxyPut_pargs() throw();
  const std::string* Trapdoor;
  const std::string* Val;
  const std::string* IndexTrapdoor;
  const std::string* IndexVal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyPut_pargs& obj);
};


class TProxyService_ProxyPut_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  TProxyService_ProxyPut_result(const TProxyService_ProxyPut_result&);
  TProxyService_ProxyPut_result& operator=(const TProxyService_ProxyPut_result&);
  TProxyService_ProxyPut_result() {
  }

  virtual ~TProxyService_ProxyPut_result() throw();

  bool operator == (const TProxyService_ProxyPut_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TProxyService_ProxyPut_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyPut_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyPut_result& obj);
};


class TProxyService_ProxyPut_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~TProxyService_ProxyPut_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyPut_presult& obj);
};


class TProxyService_ProxyGetColumn_args {
 public:

  static const char* ascii_fingerprint; // = "343DA57F446177400B333DC49B037B0C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

  TProxyService_ProxyGetColumn_args(const TProxyService_ProxyGetColumn_args&);
  TProxyService_ProxyGetColumn_args& operator=(const TProxyService_ProxyGetColumn_args&);
  TProxyService_ProxyGetColumn_args() : IndexTrapdoor(), IndexMask(), GetNum(0) {
  }

  virtual ~TProxyService_ProxyGetColumn_args() throw();
  std::string IndexTrapdoor;
  std::string IndexMask;
  int32_t GetNum;

  void __set_IndexTrapdoor(const std::string& val);

  void __set_IndexMask(const std::string& val);

  void __set_GetNum(const int32_t val);

  bool operator == (const TProxyService_ProxyGetColumn_args & rhs) const
  {
    if (!(IndexTrapdoor == rhs.IndexTrapdoor))
      return false;
    if (!(IndexMask == rhs.IndexMask))
      return false;
    if (!(GetNum == rhs.GetNum))
      return false;
    return true;
  }
  bool operator != (const TProxyService_ProxyGetColumn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyGetColumn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyGetColumn_args& obj);
};


class TProxyService_ProxyGetColumn_pargs {
 public:

  static const char* ascii_fingerprint; // = "343DA57F446177400B333DC49B037B0C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};


  virtual ~TProxyService_ProxyGetColumn_pargs() throw();
  const std::string* IndexTrapdoor;
  const std::string* IndexMask;
  const int32_t* GetNum;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyGetColumn_pargs& obj);
};

typedef struct _TProxyService_ProxyGetColumn_result__isset {
  _TProxyService_ProxyGetColumn_result__isset() : success(false) {}
  bool success :1;
} _TProxyService_ProxyGetColumn_result__isset;

class TProxyService_ProxyGetColumn_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  TProxyService_ProxyGetColumn_result(const TProxyService_ProxyGetColumn_result&);
  TProxyService_ProxyGetColumn_result& operator=(const TProxyService_ProxyGetColumn_result&);
  TProxyService_ProxyGetColumn_result() {
  }

  virtual ~TProxyService_ProxyGetColumn_result() throw();
  std::vector<std::string>  success;

  _TProxyService_ProxyGetColumn_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TProxyService_ProxyGetColumn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TProxyService_ProxyGetColumn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyGetColumn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyGetColumn_result& obj);
};

typedef struct _TProxyService_ProxyGetColumn_presult__isset {
  _TProxyService_ProxyGetColumn_presult__isset() : success(false) {}
  bool success :1;
} _TProxyService_ProxyGetColumn_presult__isset;

class TProxyService_ProxyGetColumn_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~TProxyService_ProxyGetColumn_presult() throw();
  std::vector<std::string> * success;

  _TProxyService_ProxyGetColumn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_ProxyGetColumn_presult& obj);
};


class TProxyService_EqualSearch1_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TProxyService_EqualSearch1_args(const TProxyService_EqualSearch1_args&);
  TProxyService_EqualSearch1_args& operator=(const TProxyService_EqualSearch1_args&);
  TProxyService_EqualSearch1_args() : IndexTrapdoor(), IndexMask() {
  }

  virtual ~TProxyService_EqualSearch1_args() throw();
  std::string IndexTrapdoor;
  std::string IndexMask;

  void __set_IndexTrapdoor(const std::string& val);

  void __set_IndexMask(const std::string& val);

  bool operator == (const TProxyService_EqualSearch1_args & rhs) const
  {
    if (!(IndexTrapdoor == rhs.IndexTrapdoor))
      return false;
    if (!(IndexMask == rhs.IndexMask))
      return false;
    return true;
  }
  bool operator != (const TProxyService_EqualSearch1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_EqualSearch1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch1_args& obj);
};


class TProxyService_EqualSearch1_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~TProxyService_EqualSearch1_pargs() throw();
  const std::string* IndexTrapdoor;
  const std::string* IndexMask;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch1_pargs& obj);
};

typedef struct _TProxyService_EqualSearch1_result__isset {
  _TProxyService_EqualSearch1_result__isset() : success(false) {}
  bool success :1;
} _TProxyService_EqualSearch1_result__isset;

class TProxyService_EqualSearch1_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  TProxyService_EqualSearch1_result(const TProxyService_EqualSearch1_result&);
  TProxyService_EqualSearch1_result& operator=(const TProxyService_EqualSearch1_result&);
  TProxyService_EqualSearch1_result() {
  }

  virtual ~TProxyService_EqualSearch1_result() throw();
  std::vector<std::string>  success;

  _TProxyService_EqualSearch1_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TProxyService_EqualSearch1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TProxyService_EqualSearch1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_EqualSearch1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch1_result& obj);
};

typedef struct _TProxyService_EqualSearch1_presult__isset {
  _TProxyService_EqualSearch1_presult__isset() : success(false) {}
  bool success :1;
} _TProxyService_EqualSearch1_presult__isset;

class TProxyService_EqualSearch1_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~TProxyService_EqualSearch1_presult() throw();
  std::vector<std::string> * success;

  _TProxyService_EqualSearch1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch1_presult& obj);
};


class TProxyService_EqualSearch2_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TProxyService_EqualSearch2_args(const TProxyService_EqualSearch2_args&);
  TProxyService_EqualSearch2_args& operator=(const TProxyService_EqualSearch2_args&);
  TProxyService_EqualSearch2_args() : IndexTrapdoor(), IndexMask() {
  }

  virtual ~TProxyService_EqualSearch2_args() throw();
  std::string IndexTrapdoor;
  std::string IndexMask;

  void __set_IndexTrapdoor(const std::string& val);

  void __set_IndexMask(const std::string& val);

  bool operator == (const TProxyService_EqualSearch2_args & rhs) const
  {
    if (!(IndexTrapdoor == rhs.IndexTrapdoor))
      return false;
    if (!(IndexMask == rhs.IndexMask))
      return false;
    return true;
  }
  bool operator != (const TProxyService_EqualSearch2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_EqualSearch2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch2_args& obj);
};


class TProxyService_EqualSearch2_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~TProxyService_EqualSearch2_pargs() throw();
  const std::string* IndexTrapdoor;
  const std::string* IndexMask;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch2_pargs& obj);
};

typedef struct _TProxyService_EqualSearch2_result__isset {
  _TProxyService_EqualSearch2_result__isset() : success(false) {}
  bool success :1;
} _TProxyService_EqualSearch2_result__isset;

class TProxyService_EqualSearch2_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  TProxyService_EqualSearch2_result(const TProxyService_EqualSearch2_result&);
  TProxyService_EqualSearch2_result& operator=(const TProxyService_EqualSearch2_result&);
  TProxyService_EqualSearch2_result() {
  }

  virtual ~TProxyService_EqualSearch2_result() throw();
  std::vector<std::string>  success;

  _TProxyService_EqualSearch2_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TProxyService_EqualSearch2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TProxyService_EqualSearch2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_EqualSearch2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch2_result& obj);
};

typedef struct _TProxyService_EqualSearch2_presult__isset {
  _TProxyService_EqualSearch2_presult__isset() : success(false) {}
  bool success :1;
} _TProxyService_EqualSearch2_presult__isset;

class TProxyService_EqualSearch2_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~TProxyService_EqualSearch2_presult() throw();
  std::vector<std::string> * success;

  _TProxyService_EqualSearch2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch2_presult& obj);
};


class TProxyService_OrderSearch_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TProxyService_OrderSearch_args(const TProxyService_OrderSearch_args&);
  TProxyService_OrderSearch_args& operator=(const TProxyService_OrderSearch_args&);
  TProxyService_OrderSearch_args() : IndexTrapdoor(), OrderLeft() {
  }

  virtual ~TProxyService_OrderSearch_args() throw();
  std::string IndexTrapdoor;
  std::string OrderLeft;

  void __set_IndexTrapdoor(const std::string& val);

  void __set_OrderLeft(const std::string& val);

  bool operator == (const TProxyService_OrderSearch_args & rhs) const
  {
    if (!(IndexTrapdoor == rhs.IndexTrapdoor))
      return false;
    if (!(OrderLeft == rhs.OrderLeft))
      return false;
    return true;
  }
  bool operator != (const TProxyService_OrderSearch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_OrderSearch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_OrderSearch_args& obj);
};


class TProxyService_OrderSearch_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~TProxyService_OrderSearch_pargs() throw();
  const std::string* IndexTrapdoor;
  const std::string* OrderLeft;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_OrderSearch_pargs& obj);
};

typedef struct _TProxyService_OrderSearch_result__isset {
  _TProxyService_OrderSearch_result__isset() : success(false) {}
  bool success :1;
} _TProxyService_OrderSearch_result__isset;

class TProxyService_OrderSearch_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  TProxyService_OrderSearch_result(const TProxyService_OrderSearch_result&);
  TProxyService_OrderSearch_result& operator=(const TProxyService_OrderSearch_result&);
  TProxyService_OrderSearch_result() {
  }

  virtual ~TProxyService_OrderSearch_result() throw();
  std::vector<std::string>  success;

  _TProxyService_OrderSearch_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TProxyService_OrderSearch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TProxyService_OrderSearch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_OrderSearch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_OrderSearch_result& obj);
};

typedef struct _TProxyService_OrderSearch_presult__isset {
  _TProxyService_OrderSearch_presult__isset() : success(false) {}
  bool success :1;
} _TProxyService_OrderSearch_presult__isset;

class TProxyService_OrderSearch_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~TProxyService_OrderSearch_presult() throw();
  std::vector<std::string> * success;

  _TProxyService_OrderSearch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_OrderSearch_presult& obj);
};


class TProxyService_RunCommand_args {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  TProxyService_RunCommand_args(const TProxyService_RunCommand_args&);
  TProxyService_RunCommand_args& operator=(const TProxyService_RunCommand_args&);
  TProxyService_RunCommand_args() {
  }

  virtual ~TProxyService_RunCommand_args() throw();
  std::vector<std::string>  command;

  void __set_command(const std::vector<std::string> & val);

  bool operator == (const TProxyService_RunCommand_args & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    return true;
  }
  bool operator != (const TProxyService_RunCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_RunCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_RunCommand_args& obj);
};


class TProxyService_RunCommand_pargs {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};


  virtual ~TProxyService_RunCommand_pargs() throw();
  const std::vector<std::string> * command;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_RunCommand_pargs& obj);
};

typedef struct _TProxyService_RunCommand_result__isset {
  _TProxyService_RunCommand_result__isset() : success(false) {}
  bool success :1;
} _TProxyService_RunCommand_result__isset;

class TProxyService_RunCommand_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  TProxyService_RunCommand_result(const TProxyService_RunCommand_result&);
  TProxyService_RunCommand_result& operator=(const TProxyService_RunCommand_result&);
  TProxyService_RunCommand_result() {
  }

  virtual ~TProxyService_RunCommand_result() throw();
  std::vector<std::string>  success;

  _TProxyService_RunCommand_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TProxyService_RunCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TProxyService_RunCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_RunCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_RunCommand_result& obj);
};

typedef struct _TProxyService_RunCommand_presult__isset {
  _TProxyService_RunCommand_presult__isset() : success(false) {}
  bool success :1;
} _TProxyService_RunCommand_presult__isset;

class TProxyService_RunCommand_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~TProxyService_RunCommand_presult() throw();
  std::vector<std::string> * success;

  _TProxyService_RunCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_RunCommand_presult& obj);
};


class TProxyService_EqualSearch1PlainText_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TProxyService_EqualSearch1PlainText_args(const TProxyService_EqualSearch1PlainText_args&);
  TProxyService_EqualSearch1PlainText_args& operator=(const TProxyService_EqualSearch1PlainText_args&);
  TProxyService_EqualSearch1PlainText_args() : IndexTrapdoor(), IndexMask() {
  }

  virtual ~TProxyService_EqualSearch1PlainText_args() throw();
  std::string IndexTrapdoor;
  std::string IndexMask;

  void __set_IndexTrapdoor(const std::string& val);

  void __set_IndexMask(const std::string& val);

  bool operator == (const TProxyService_EqualSearch1PlainText_args & rhs) const
  {
    if (!(IndexTrapdoor == rhs.IndexTrapdoor))
      return false;
    if (!(IndexMask == rhs.IndexMask))
      return false;
    return true;
  }
  bool operator != (const TProxyService_EqualSearch1PlainText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_EqualSearch1PlainText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch1PlainText_args& obj);
};


class TProxyService_EqualSearch1PlainText_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~TProxyService_EqualSearch1PlainText_pargs() throw();
  const std::string* IndexTrapdoor;
  const std::string* IndexMask;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch1PlainText_pargs& obj);
};

typedef struct _TProxyService_EqualSearch1PlainText_result__isset {
  _TProxyService_EqualSearch1PlainText_result__isset() : success(false) {}
  bool success :1;
} _TProxyService_EqualSearch1PlainText_result__isset;

class TProxyService_EqualSearch1PlainText_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  TProxyService_EqualSearch1PlainText_result(const TProxyService_EqualSearch1PlainText_result&);
  TProxyService_EqualSearch1PlainText_result& operator=(const TProxyService_EqualSearch1PlainText_result&);
  TProxyService_EqualSearch1PlainText_result() {
  }

  virtual ~TProxyService_EqualSearch1PlainText_result() throw();
  std::vector<std::string>  success;

  _TProxyService_EqualSearch1PlainText_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TProxyService_EqualSearch1PlainText_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TProxyService_EqualSearch1PlainText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_EqualSearch1PlainText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch1PlainText_result& obj);
};

typedef struct _TProxyService_EqualSearch1PlainText_presult__isset {
  _TProxyService_EqualSearch1PlainText_presult__isset() : success(false) {}
  bool success :1;
} _TProxyService_EqualSearch1PlainText_presult__isset;

class TProxyService_EqualSearch1PlainText_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~TProxyService_EqualSearch1PlainText_presult() throw();
  std::vector<std::string> * success;

  _TProxyService_EqualSearch1PlainText_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch1PlainText_presult& obj);
};


class TProxyService_EqualSearch2PlainText_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TProxyService_EqualSearch2PlainText_args(const TProxyService_EqualSearch2PlainText_args&);
  TProxyService_EqualSearch2PlainText_args& operator=(const TProxyService_EqualSearch2PlainText_args&);
  TProxyService_EqualSearch2PlainText_args() : IndexTrapdoor(), IndexMask() {
  }

  virtual ~TProxyService_EqualSearch2PlainText_args() throw();
  std::string IndexTrapdoor;
  std::string IndexMask;

  void __set_IndexTrapdoor(const std::string& val);

  void __set_IndexMask(const std::string& val);

  bool operator == (const TProxyService_EqualSearch2PlainText_args & rhs) const
  {
    if (!(IndexTrapdoor == rhs.IndexTrapdoor))
      return false;
    if (!(IndexMask == rhs.IndexMask))
      return false;
    return true;
  }
  bool operator != (const TProxyService_EqualSearch2PlainText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_EqualSearch2PlainText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch2PlainText_args& obj);
};


class TProxyService_EqualSearch2PlainText_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~TProxyService_EqualSearch2PlainText_pargs() throw();
  const std::string* IndexTrapdoor;
  const std::string* IndexMask;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch2PlainText_pargs& obj);
};

typedef struct _TProxyService_EqualSearch2PlainText_result__isset {
  _TProxyService_EqualSearch2PlainText_result__isset() : success(false) {}
  bool success :1;
} _TProxyService_EqualSearch2PlainText_result__isset;

class TProxyService_EqualSearch2PlainText_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  TProxyService_EqualSearch2PlainText_result(const TProxyService_EqualSearch2PlainText_result&);
  TProxyService_EqualSearch2PlainText_result& operator=(const TProxyService_EqualSearch2PlainText_result&);
  TProxyService_EqualSearch2PlainText_result() {
  }

  virtual ~TProxyService_EqualSearch2PlainText_result() throw();
  std::vector<std::string>  success;

  _TProxyService_EqualSearch2PlainText_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TProxyService_EqualSearch2PlainText_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TProxyService_EqualSearch2PlainText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_EqualSearch2PlainText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch2PlainText_result& obj);
};

typedef struct _TProxyService_EqualSearch2PlainText_presult__isset {
  _TProxyService_EqualSearch2PlainText_presult__isset() : success(false) {}
  bool success :1;
} _TProxyService_EqualSearch2PlainText_presult__isset;

class TProxyService_EqualSearch2PlainText_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~TProxyService_EqualSearch2PlainText_presult() throw();
  std::vector<std::string> * success;

  _TProxyService_EqualSearch2PlainText_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_EqualSearch2PlainText_presult& obj);
};


class TProxyService_OrderSearchPlainText_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TProxyService_OrderSearchPlainText_args(const TProxyService_OrderSearchPlainText_args&);
  TProxyService_OrderSearchPlainText_args& operator=(const TProxyService_OrderSearchPlainText_args&);
  TProxyService_OrderSearchPlainText_args() : IndexTrapdoor(), OrderLeft() {
  }

  virtual ~TProxyService_OrderSearchPlainText_args() throw();
  std::string IndexTrapdoor;
  std::string OrderLeft;

  void __set_IndexTrapdoor(const std::string& val);

  void __set_OrderLeft(const std::string& val);

  bool operator == (const TProxyService_OrderSearchPlainText_args & rhs) const
  {
    if (!(IndexTrapdoor == rhs.IndexTrapdoor))
      return false;
    if (!(OrderLeft == rhs.OrderLeft))
      return false;
    return true;
  }
  bool operator != (const TProxyService_OrderSearchPlainText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_OrderSearchPlainText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_OrderSearchPlainText_args& obj);
};


class TProxyService_OrderSearchPlainText_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~TProxyService_OrderSearchPlainText_pargs() throw();
  const std::string* IndexTrapdoor;
  const std::string* OrderLeft;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_OrderSearchPlainText_pargs& obj);
};

typedef struct _TProxyService_OrderSearchPlainText_result__isset {
  _TProxyService_OrderSearchPlainText_result__isset() : success(false) {}
  bool success :1;
} _TProxyService_OrderSearchPlainText_result__isset;

class TProxyService_OrderSearchPlainText_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  TProxyService_OrderSearchPlainText_result(const TProxyService_OrderSearchPlainText_result&);
  TProxyService_OrderSearchPlainText_result& operator=(const TProxyService_OrderSearchPlainText_result&);
  TProxyService_OrderSearchPlainText_result() {
  }

  virtual ~TProxyService_OrderSearchPlainText_result() throw();
  std::vector<std::string>  success;

  _TProxyService_OrderSearchPlainText_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TProxyService_OrderSearchPlainText_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TProxyService_OrderSearchPlainText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_OrderSearchPlainText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_OrderSearchPlainText_result& obj);
};

typedef struct _TProxyService_OrderSearchPlainText_presult__isset {
  _TProxyService_OrderSearchPlainText_presult__isset() : success(false) {}
  bool success :1;
} _TProxyService_OrderSearchPlainText_presult__isset;

class TProxyService_OrderSearchPlainText_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~TProxyService_OrderSearchPlainText_presult() throw();
  std::vector<std::string> * success;

  _TProxyService_OrderSearchPlainText_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TProxyService_OrderSearchPlainText_presult& obj);
};

class TProxyServiceClient : virtual public TProxyServiceIf {
 public:
  TProxyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TProxyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ProxyGet(std::string& _return, const std::string& Trapdoor);
  void send_ProxyGet(const std::string& Trapdoor);
  void recv_ProxyGet(std::string& _return);
  void ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal);
  void send_ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal);
  void recv_ProxyPut();
  void ProxyGetColumn(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask, const int32_t GetNum);
  void send_ProxyGetColumn(const std::string& IndexTrapdoor, const std::string& IndexMask, const int32_t GetNum);
  void recv_ProxyGetColumn(std::vector<std::string> & _return);
  void EqualSearch1(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask);
  void send_EqualSearch1(const std::string& IndexTrapdoor, const std::string& IndexMask);
  void recv_EqualSearch1(std::vector<std::string> & _return);
  void EqualSearch2(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask);
  void send_EqualSearch2(const std::string& IndexTrapdoor, const std::string& IndexMask);
  void recv_EqualSearch2(std::vector<std::string> & _return);
  void OrderSearch(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& OrderLeft);
  void send_OrderSearch(const std::string& IndexTrapdoor, const std::string& OrderLeft);
  void recv_OrderSearch(std::vector<std::string> & _return);
  void RunCommand(std::vector<std::string> & _return, const std::vector<std::string> & command);
  void send_RunCommand(const std::vector<std::string> & command);
  void recv_RunCommand(std::vector<std::string> & _return);
  void EqualSearch1PlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask);
  void send_EqualSearch1PlainText(const std::string& IndexTrapdoor, const std::string& IndexMask);
  void recv_EqualSearch1PlainText(std::vector<std::string> & _return);
  void EqualSearch2PlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask);
  void send_EqualSearch2PlainText(const std::string& IndexTrapdoor, const std::string& IndexMask);
  void recv_EqualSearch2PlainText(std::vector<std::string> & _return);
  void OrderSearchPlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& OrderLeft);
  void send_OrderSearchPlainText(const std::string& IndexTrapdoor, const std::string& OrderLeft);
  void recv_OrderSearchPlainText(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TProxyServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TProxyServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TProxyServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ProxyGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ProxyPut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ProxyGetColumn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EqualSearch1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EqualSearch2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_OrderSearch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RunCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EqualSearch1PlainText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EqualSearch2PlainText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_OrderSearchPlainText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TProxyServiceProcessor(boost::shared_ptr<TProxyServiceIf> iface) :
    iface_(iface) {
    processMap_["ProxyGet"] = &TProxyServiceProcessor::process_ProxyGet;
    processMap_["ProxyPut"] = &TProxyServiceProcessor::process_ProxyPut;
    processMap_["ProxyGetColumn"] = &TProxyServiceProcessor::process_ProxyGetColumn;
    processMap_["EqualSearch1"] = &TProxyServiceProcessor::process_EqualSearch1;
    processMap_["EqualSearch2"] = &TProxyServiceProcessor::process_EqualSearch2;
    processMap_["OrderSearch"] = &TProxyServiceProcessor::process_OrderSearch;
    processMap_["RunCommand"] = &TProxyServiceProcessor::process_RunCommand;
    processMap_["EqualSearch1PlainText"] = &TProxyServiceProcessor::process_EqualSearch1PlainText;
    processMap_["EqualSearch2PlainText"] = &TProxyServiceProcessor::process_EqualSearch2PlainText;
    processMap_["OrderSearchPlainText"] = &TProxyServiceProcessor::process_OrderSearchPlainText;
  }

  virtual ~TProxyServiceProcessor() {}
};

class TProxyServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TProxyServiceProcessorFactory(const ::boost::shared_ptr< TProxyServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TProxyServiceIfFactory > handlerFactory_;
};

class TProxyServiceMultiface : virtual public TProxyServiceIf {
 public:
  TProxyServiceMultiface(std::vector<boost::shared_ptr<TProxyServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TProxyServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TProxyServiceIf> > ifaces_;
  TProxyServiceMultiface() {}
  void add(boost::shared_ptr<TProxyServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ProxyGet(std::string& _return, const std::string& Trapdoor) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ProxyGet(_return, Trapdoor);
    }
    ifaces_[i]->ProxyGet(_return, Trapdoor);
    return;
  }

  void ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ProxyPut(Trapdoor, Val, IndexTrapdoor, IndexVal);
    }
    ifaces_[i]->ProxyPut(Trapdoor, Val, IndexTrapdoor, IndexVal);
  }

  void ProxyGetColumn(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask, const int32_t GetNum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ProxyGetColumn(_return, IndexTrapdoor, IndexMask, GetNum);
    }
    ifaces_[i]->ProxyGetColumn(_return, IndexTrapdoor, IndexMask, GetNum);
    return;
  }

  void EqualSearch1(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EqualSearch1(_return, IndexTrapdoor, IndexMask);
    }
    ifaces_[i]->EqualSearch1(_return, IndexTrapdoor, IndexMask);
    return;
  }

  void EqualSearch2(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EqualSearch2(_return, IndexTrapdoor, IndexMask);
    }
    ifaces_[i]->EqualSearch2(_return, IndexTrapdoor, IndexMask);
    return;
  }

  void OrderSearch(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& OrderLeft) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OrderSearch(_return, IndexTrapdoor, OrderLeft);
    }
    ifaces_[i]->OrderSearch(_return, IndexTrapdoor, OrderLeft);
    return;
  }

  void RunCommand(std::vector<std::string> & _return, const std::vector<std::string> & command) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RunCommand(_return, command);
    }
    ifaces_[i]->RunCommand(_return, command);
    return;
  }

  void EqualSearch1PlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EqualSearch1PlainText(_return, IndexTrapdoor, IndexMask);
    }
    ifaces_[i]->EqualSearch1PlainText(_return, IndexTrapdoor, IndexMask);
    return;
  }

  void EqualSearch2PlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EqualSearch2PlainText(_return, IndexTrapdoor, IndexMask);
    }
    ifaces_[i]->EqualSearch2PlainText(_return, IndexTrapdoor, IndexMask);
    return;
  }

  void OrderSearchPlainText(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& OrderLeft) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OrderSearchPlainText(_return, IndexTrapdoor, OrderLeft);
    }
    ifaces_[i]->OrderSearchPlainText(_return, IndexTrapdoor, OrderLeft);
    return;
  }

};

} // namespace

#endif
